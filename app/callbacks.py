from config import CHANNEL, userData
import app.keyboards as kb

import databases.assortment as dba
import databases.posts as dbp

import aiosqlite
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


callbacks = Router()



# üõí –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
@callbacks.callback_query(F.data == "add")
async def cbAdd(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentChequeGlobal'] += userData[callback.from_user.id]['assortmentCheque']
    result = f"{userData[callback.from_user.id]['inAssortment']} ({userData[callback.from_user.id]['assortmentCount']} —à—Ç.) ({userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ)\n"

    if userData[callback.from_user.id]['assortmentCart'] == "None":
        userData[callback.from_user.id]['assortmentCart'] = result
    else:
        userData[callback.from_user.id]['assortmentCart'] += result

    userData[callback.from_user.id]['assortmentCount'] = 1
    userData[callback.from_user.id]['inAssortment'] = "True"

    await callback.message.edit_text(f"<b>{result}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                                     reply_markup=None)

@callbacks.callback_query(F.data == "plus")
async def cbPlus(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCount'] += 1
    productName = userData[callback.from_user.id]['inAssortment']

    async with aiosqlite.connect('databases/assortment.db') as db:
        async with db.execute("SELECT description, price, priceDiscount FROM assortment WHERE name = ?", (productName,)) as cursor:
            result = await cursor.fetchone()

    if result:
        productDescription = result[0]
        productPrice = int(result[1])
        productPriceDiscount = int(result[2])
        productPriceDiscounted = productPrice - productPriceDiscount
        userData[callback.from_user.id]['assortmentCheque'] = userData[callback.from_user.id]['assortmentCount'] * productPriceDiscounted
        

    productPriceDiscountedText = f"{productPrice} ‚ÇΩ" if productPriceDiscount == 0 else f"<s>{productPrice}</s> {productPriceDiscounted} ‚ÇΩ"
    await callback.message.edit_text(f"<b>{productName}</b>\n{productDescription}\n\n"
                        f"–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {productPriceDiscountedText}\n"
                        f"–ö–æ–ª-–≤–æ: {userData[callback.from_user.id]['assortmentCount']}\n"
                        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ",
                        reply_markup=kb.assortmentPageButtons)
        
@callbacks.callback_query(F.data == "minus")
async def cbMinus(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCount'] -= 1
    
    if userData[callback.from_user.id]['assortmentCount'] == 0:
        await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ <b>{userData[callback.from_user.id]['inAssortment']}</b> –æ—Ç–º–µ–Ω—ë–Ω.")
        userData[callback.from_user.id]['assortmentCount'] = 1
        userData[callback.from_user.id]['inAssortment'] = "True"
    else:
        productName = userData[callback.from_user.id]['inAssortment']
        async with aiosqlite.connect('databases/assortment.db') as db:
            async with db.execute("SELECT description, price, priceDiscount FROM assortment WHERE name = ?", (productName,)) as cursor:
                result = await cursor.fetchone()

        if result:
            productDescription = result[0]
            productPrice = int(result[1])
            productPriceDiscount = int(result[2])
            productPriceDiscounted = productPrice - productPriceDiscount
            userData[callback.from_user.id]['assortmentCheque'] = userData[callback.from_user.id]['assortmentCount'] * productPriceDiscounted
            

        productPriceDiscountedText = f"{productPrice} ‚ÇΩ" if productPriceDiscount == 0 else f"<s>{productPrice}</s> {productPriceDiscounted} ‚ÇΩ"
        await callback.message.edit_text(f"<b>{productName}</b>\n{productDescription}\n\n"
                            f"–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {productPriceDiscountedText}\n"
                            f"–ö–æ–ª-–≤–æ: {userData[callback.from_user.id]['assortmentCount']}\n"
                            f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ",
                            reply_markup=kb.assortmentPageButtons)
            

@callbacks.callback_query(F.data == "cartBuy")
async def cbCartBuy(callback: CallbackQuery):
    await callback.message.edit_text(f"üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n{userData[callback.from_user.id]['assortmentCart']}\n"
                        f"<u>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {userData[callback.from_user.id]['assortmentChequeGlobal']} ‚ÇΩ</u>\n\n"
                        f"‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b> –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞.")

    linkToUser = f"<a href='https://t.me/{callback.from_user.username}'>{callback.from_user.first_name}</a>" if callback.from_user.username else f"<a href='tg://user?id={callback.from_user.id}'>{callback.from_user.first_name}</a>"
    await callback.bot.send_message(
        chat_id=-1002824873764,
        text=f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
             f"<u>–ó–∞–∫–∞–∑—á–∏–∫:</u> {linkToUser}\n\n"
             f"üõí <b>–¢–æ–≤–∞—Ä—ã</b>\n{userData[callback.from_user.id]['assortmentCart']}"
             f"<u>–û–±—â–∞—è —Å—É–º–º–∞:</u> {userData[callback.from_user.id]['assortmentChequeGlobal']} ‚ÇΩ")
    
    userData[callback.from_user.id]['assortmentCart'] = "None"
    userData[callback.from_user.id]['assortmentChequeGlobal'] = 0

@callbacks.callback_query(F.data == "cartClear")
async def cbCartClear(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCart'] = "None"
    userData[callback.from_user.id]['assortmentChequeGlobal'] = 0
    await callback.message.edit_text("üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n<i>–¢–µ–ø–µ—Ä—å —Ç—É—Ç –ø—É—Å—Ç–æ...</i>")


# –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
# /assortment
class assortmentProductAdd(StatesGroup):
    fsmName = State()
    fsmDescription = State()
    fsmPrice = State()
    fsmPriceDiscount = State()

@callbacks.callback_query(F.data == "assortmentAdd")
async def admcmdDatabase(callback: CallbackQuery, state: FSMContext):
    await state.set_state(assortmentProductAdd.fsmName) 
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@callbacks.message(assortmentProductAdd.fsmName)
async def admfsmName(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(assortmentProductAdd.fsmDescription)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–ø—É—Å—Ç–∏–º–∞ –ª—é–±–∞—è –¥–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–∞):")

@callbacks.message(assortmentProductAdd.fsmDescription)
async def admfsmDescription(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(assortmentProductAdd.fsmPrice)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É (–±–µ–∑ —Å–∫–∏–¥–∫–∏):")

@callbacks.message(assortmentProductAdd.fsmPrice)
async def admfsmPrice(message: Message, state: FSMContext):
        try:
            price = int(message.text)
            if price < 0:
                await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            await state.update_data(price=price)
            await state.set_state(assortmentProductAdd.fsmPriceDiscount)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É (–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. 0 –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è. –ï—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ):")
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

@callbacks.message(assortmentProductAdd.fsmPriceDiscount)
async def admfsmPriceDiscount(message: Message, state: FSMContext):
    try:
        priceDiscount = int(message.text)
        data = await state.get_data()
        if priceDiscount < 0:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if priceDiscount > data['price']:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(priceDiscount=priceDiscount)
        await state.clear()
        await dba.add(data['name'], data['description'], data['price'], priceDiscount)

        if priceDiscount == 0:
            priceDiscountText = f"{data['price']} ‚ÇΩ"
        else:
            priceDiscounted = data['price'] - priceDiscount
            priceDiscountText = f"<s>{data['price']} ‚ÇΩ</s> {priceDiscounted} ‚ÇΩ üî•"

        await message.answer(f"<b>{data['name']}</b>\n{data['description']}\n\n–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {priceDiscountText}")
    except ValueError:
        await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


@callbacks.callback_query(F.data == "assortmentList")
async def cbAssortmentList(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.assortmentList())

@callbacks.callback_query(F.data.startswith("product_"))
async def cbAssortmentListProductPage(callback: CallbackQuery):
    productNumber = int(callback.data.replace("product_", ""))
    
    async with aiosqlite.connect('databases/assortment.db') as db:
        async with db.execute("SELECT name, description, price, priceDiscount FROM assortment WHERE number = ?", (productNumber,)) as cursor:
            product = await cursor.fetchone()

    if product:
        name, description, price, discount = product
        if discount == 0:
            priceDiscountText = f"{price} ‚ÇΩ"
        else:
            priceDiscounted = price - discount
            priceDiscountText = f"<s>{price}</s> {priceDiscounted} ‚ÇΩ üî•"
        
        await callback.message.edit_text(
            f"<b>#{productNumber} - {name}</b>\n{description}\n\n–¶–µ–Ω–∞: {priceDiscountText}",
            reply_markup=kb.assortmentListActions_(productNumber)
        )
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

@callbacks.callback_query(F.data.startswith("assortmentListActionsDelete_"))
async def cbAssortmentListActionsDelete(callback: CallbackQuery):
    productNumber = int(callback.data.replace("assortmentListActionsDelete_", ""))
    await dba.delete(productNumber)

    await callback.answer(f"–¢–æ–≤–∞—Ä ‚Ññ{productNumber} —É–¥–∞–ª—ë–Ω.")
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.assortmentList())


# /posts
class postsAdd(StatesGroup):
    fsmText = State()
    fsmTime = State()

@callbacks.callback_query(F.data == "postsAdd")
async def cbPostsAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(postsAdd.fsmText)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
                                     reply_markup=None)

@callbacks.message(postsAdd.fsmText)
async def admfsmPostText(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(postsAdd.fsmTime)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú):")

@callbacks.message(postsAdd.fsmTime)
async def process_post_time(message: Message, state: FSMContext):
    try:
        timeStr = message.text.strip()
        timeIntNow = datetime.now()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        post_time = datetime.strptime(timeStr, "%d.%m %H:%M").replace(year=timeIntNow.year)   
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if post_time <= timeIntNow:
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        post_text = data.get('text')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await dbp.add(post_text, post_time, CHANNEL)
        
        await message.answer(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {post_time.strftime('%d.%m %H:%M')}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú –ß–ß:–ú–ú\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await state.clear()


'''
@callbacks.callback_query(F.data == "postsList")
async def cbPostsList(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:", reply_markup=await kb.postsListKeyboard())
'''
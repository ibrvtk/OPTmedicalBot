from config import CHANNEL, ADMINCHATS, ADMINUSERS, userData
import app.keyboards as kb

import databases.assortment as dba
import databases.posts as dbp

import aiosqlite
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


callbacks = Router()



# üìÑ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
@callbacks.callback_query(F.data == "add")
async def cbAdd(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentChequeGlobal'] += userData[callback.from_user.id]['assortmentCheque']
    result = f"{userData[callback.from_user.id]['inAssortment']} ({userData[callback.from_user.id]['assortmentCount']} —à—Ç.) ({userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ)\n"

    if userData[callback.from_user.id]['assortmentCart'] == "None":
        userData[callback.from_user.id]['assortmentCart'] = result
    else:
        userData[callback.from_user.id]['assortmentCart'] += result

    userData[callback.from_user.id]['assortmentCount'] = 1
    userData[callback.from_user.id]['inAssortment'] = "True"

    await callback.message.edit_text(f"<b>{result}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                                     reply_markup=None)

@callbacks.callback_query(F.data == "plus")
async def cbPlus(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCount'] += 1
    productName = userData[callback.from_user.id]['inAssortment']

    async with aiosqlite.connect('databases/assortment.db') as db:
        async with db.execute("SELECT description, price, priceDiscount FROM assortment WHERE name = ?", (productName,)) as cursor:
            result = await cursor.fetchone()

    if result:
        productDescription = result[0]
        productPrice = int(result[1])
        productPriceDiscount = int(result[2])
        productPriceDiscounted = productPrice - productPriceDiscount
        userData[callback.from_user.id]['assortmentCheque'] = userData[callback.from_user.id]['assortmentCount'] * productPriceDiscounted
        

    productPriceDiscountedText = f"{productPrice} ‚ÇΩ" if productPriceDiscount == 0 else f"<s>{productPrice}</s> {productPriceDiscounted} ‚ÇΩ"
    await callback.message.edit_text(f"<b>{productName}</b>\n{productDescription}\n\n"
                        f"–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {productPriceDiscountedText}\n"
                        f"–ö–æ–ª-–≤–æ: {userData[callback.from_user.id]['assortmentCount']}\n"
                        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ",
                        reply_markup=kb.assortmentPageButtons)
        
@callbacks.callback_query(F.data == "minus")
async def cbMinus(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCount'] -= 1
    
    if userData[callback.from_user.id]['assortmentCount'] == 0:
        await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ <b>{userData[callback.from_user.id]['inAssortment']}</b> –æ—Ç–º–µ–Ω—ë–Ω.")
        userData[callback.from_user.id]['assortmentCount'] = 1
        userData[callback.from_user.id]['inAssortment'] = "True"
    else:
        productName = userData[callback.from_user.id]['inAssortment']
        async with aiosqlite.connect('databases/assortment.db') as db:
            async with db.execute("SELECT description, price, priceDiscount FROM assortment WHERE name = ?", (productName,)) as cursor:
                result = await cursor.fetchone()

        if result:
            productDescription = result[0]
            productPrice = int(result[1])
            productPriceDiscount = int(result[2])
            productPriceDiscounted = productPrice - productPriceDiscount
            userData[callback.from_user.id]['assortmentCheque'] = userData[callback.from_user.id]['assortmentCount'] * productPriceDiscounted
            

        productPriceDiscountedText = f"{productPrice} ‚ÇΩ" if productPriceDiscount == 0 else f"<s>{productPrice}</s> {productPriceDiscounted} ‚ÇΩ"
        await callback.message.edit_text(f"<b>{productName}</b>\n{productDescription}\n\n"
                            f"–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {productPriceDiscountedText}\n"
                            f"–ö–æ–ª-–≤–æ: {userData[callback.from_user.id]['assortmentCount']}\n"
                            f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {userData[callback.from_user.id]['assortmentCheque']} ‚ÇΩ",
                            reply_markup=kb.assortmentPageButtons)
            

@callbacks.callback_query(F.data == "cartBuy")
async def cbCartBuy(callback: CallbackQuery):
    await callback.message.edit_text(f"üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n{userData[callback.from_user.id]['assortmentCart']}\n"
                        f"<u>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {userData[callback.from_user.id]['assortmentChequeGlobal']} ‚ÇΩ</u>\n\n"
                        f"‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b> –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞.")

    linkToUser = f"<a href='https://t.me/{callback.from_user.username}'>{callback.from_user.first_name}</a>" if callback.from_user.username else f"<a href='tg://user?id={callback.from_user.id}'>{callback.from_user.first_name}</a>"
    allAdmins = ADMINCHATS + ADMINUSERS
    for recipients in allAdmins:
        try:
            await callback.bot.send_message(
                chat_id=recipients,
                text=f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
                    f"<u>–ó–∞–∫–∞–∑—á–∏–∫:</u> {linkToUser}\n\n"
                    f"üõí <b>–¢–æ–≤–∞—Ä—ã</b>\n{userData[callback.from_user.id]['assortmentCart']}"
                    f"<u>–û–±—â–∞—è —Å—É–º–º–∞:</u> {userData[callback.from_user.id]['assortmentChequeGlobal']} ‚ÇΩ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {recipients}: {e}")
    
    userData[callback.from_user.id]['assortmentCart'] = "None"
    userData[callback.from_user.id]['assortmentChequeGlobal'] = 0

@callbacks.callback_query(F.data == "cartClear")
async def cbCartClear(callback: CallbackQuery):
    userData[callback.from_user.id]['assortmentCart'] = "None"
    userData[callback.from_user.id]['assortmentChequeGlobal'] = 0
    await callback.message.edit_text("üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n<i>–¢–µ–ø–µ—Ä—å —Ç—É—Ç –ø—É—Å—Ç–æ...</i>")


# –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
# /assortment
@callbacks.callback_query(F.data == "assortmentList")
async def cbAssortmentList(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.assortmentList())
    
@callbacks.callback_query(F.data == "assortmentListBack")
async def cbPostsListActionsBack(callback: CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º.",
                                     reply_markup=kb.assortmentKeyboard)


# callback "assortmentAdd"
class assortmentProductAdd(StatesGroup):
    fsmName = State()
    fsmDescription = State()
    fsmPrice = State()
    fsmPriceDiscount = State()

@callbacks.callback_query(F.data == "assortmentAdd")
async def admcmdDatabase(callback: CallbackQuery, state: FSMContext):
    await state.set_state(assortmentProductAdd.fsmName)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@callbacks.message(assortmentProductAdd.fsmName)
async def admfsmName(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(assortmentProductAdd.fsmDescription)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–ø—É—Å—Ç–∏–º–∞ –ª—é–±–∞—è –¥–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–∞):")

@callbacks.message(assortmentProductAdd.fsmDescription)
async def admfsmDescription(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(assortmentProductAdd.fsmPrice)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É (–±–µ–∑ —Å–∫–∏–¥–∫–∏):")

@callbacks.message(assortmentProductAdd.fsmPrice)
async def admfsmPrice(message: Message, state: FSMContext):
        try:
            price = int(message.text)
            if price < 0:
                await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            await state.update_data(price=price)
            await state.set_state(assortmentProductAdd.fsmPriceDiscount)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É (–Ω–µ %, –Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) (0 –¥–ª—è –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è) (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ):")

        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

@callbacks.message(assortmentProductAdd.fsmPriceDiscount)
async def admfsmPriceDiscount(message: Message, state: FSMContext):
    try:
        priceDiscount = int(message.text)
        data = await state.get_data()
        if priceDiscount < 0:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if priceDiscount > data['price']:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(priceDiscount=priceDiscount)
        await state.clear()
        await dba.add(data['name'], data['description'], data['price'], priceDiscount)

        if priceDiscount == 0:
            priceDiscountText = f"{data['price']} ‚ÇΩ"
        else:
            priceDiscounted = data['price'] - priceDiscount
            priceDiscountText = f"<s>{data['price']} ‚ÇΩ</s> {priceDiscounted} ‚ÇΩ üî•"

        await message.answer(f"<b>{data['name']}</b>\n{data['description']}\n\n–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {priceDiscountText}")

    except ValueError:
        await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


# callback "assortmentList"
@callbacks.callback_query(F.data.startswith("product_"))
async def cbAssortmentListProductPage(callback: CallbackQuery):
    productNumber = int(callback.data.replace("product_", ""))
    
    async with aiosqlite.connect('databases/assortment.db') as db:
        async with db.execute("SELECT name, description, price, priceDiscount FROM assortment WHERE number = ?", (productNumber,)) as cursor:
            product = await cursor.fetchone()

        name, description, price, discount = product
        if discount == 0:
            priceDiscountText = f"{price} ‚ÇΩ"
        else:
            priceDiscounted = price - discount
            priceDiscountText = f"<s>{price}</s> {priceDiscounted} ‚ÇΩ üî•"
        
        await callback.message.edit_text(f"<b>‚Ññ{productNumber} - {name}</b>\n{description}\n\n–¶–µ–Ω–∞: {priceDiscountText}",
                                         reply_markup=kb.assortmentListActions_(productNumber))


class admfsmPriceDiscount(StatesGroup):
    newPriceDiscount = State()

@callbacks.callback_query(F.data.startswith("assortmentListActionsNewPriceDiscount_"))
async def cbAssortmentListActionsNewPriceDiscount(callback: CallbackQuery, state: FSMContext):
    productNumber = int(callback.data.replace("assortmentListActionsNewPriceDiscount_", ""))
    await state.update_data(productNumber=productNumber)
    await state.set_state(admfsmPriceDiscount.newPriceDiscount)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–µ –≤ –≤–∏–¥–µ %) (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π) "
                                     "(–µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –µ—Å—Ç—å –∏ –µ—ë –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–µ, –æ–Ω–∏ –Ω–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è):")

@callbacks.message(admfsmPriceDiscount.newPriceDiscount)
async def admfsmAssortmentListActionsNewPriceDiscount(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        productNumber = data['productNumber']

        async with aiosqlite.connect('databases/assortment.db') as db:
            async with db.execute("SELECT price FROM assortment WHERE number = ?", (productNumber,)) as cursor:
                result = await cursor.fetchone()

        productPrice = result[0]
        priceDiscount = int(message.text)

        if priceDiscount < 0:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if priceDiscount > productPrice:
            await message.answer("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        async with aiosqlite.connect('databases/assortment.db') as db:
            await db.execute("UPDATE assortment SET priceDiscount = ? WHERE number = ?",  (priceDiscount, productNumber))
            await db.commit()

        await state.clear()
        
        if priceDiscount == 0:
            await message.answer(f"–°–∫–∏–¥–∫–∞ —Ç–æ–≤–∞—Ä—É ‚Ññ{productNumber} —É–±—Ä–∞–Ω–∞.")
        else:
            await message.answer(f"–¢–æ–≤–∞—Ä—É ‚Ññ{productNumber} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ {priceDiscount} ‚ÇΩ")
        
    except ValueError:
        await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


class admfsmNewDescription(StatesGroup):
    newDescription = State()

@callbacks.callback_query(F.data.startswith("assortmentListActionsNewDescription_"))
async def cbPostsListActionsNewText(callback: CallbackQuery, state: FSMContext):
    productNumber = int(callback.data.replace("assortmentListActionsNewDescription_", ""))
    await state.update_data(productNumber=productNumber)
    await state.set_state(admfsmNewDescription.newDescription)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@callbacks.message(admfsmNewDescription.newDescription)
async def admfsmAssortmentListActionsNewText(message: Message, state: FSMContext):
        data = await state.get_data()
        productNumber = data['productNumber']
        priceDescription = message.text

        async with aiosqlite.connect('databases/assortment.db') as db:
            await db.execute("UPDATE assortment SET description = ? WHERE number = ?",  (priceDescription, productNumber))
            await db.commit()

        await state.clear()
        
        await message.answer(f"–¢–æ–≤–∞—Ä—É ‚Ññ{productNumber} –∏–∑–º–µ–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{priceDescription}")    


@callbacks.callback_query(F.data.startswith("assortmentListActionsDelete_"))
async def cbPostsListActionsDelete(callback: CallbackQuery):
    productNumber = int(callback.data.replace("assortmentListActionsDelete_", ""))
    await dba.delete(productNumber)

    await callback.answer(f"–¢–æ–≤–∞—Ä ‚Ññ{productNumber} —É–¥–∞–ª—ë–Ω.")
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.assortmentList())
    

@callbacks.callback_query(F.data == "assortmentListActionsBack")
async def cbPostsListActionsBack(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.assortmentList())


# /posts
@callbacks.callback_query(F.data == "postsList")
async def cbAssortmentList(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.postsList())
    
@callbacks.callback_query(F.data == "postsListBack")
async def cbPostsListActionsBack(callback: CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏.",
                                     reply_markup=kb.postsKeyboard)


# callback "postsAdd"
class postsAdd(StatesGroup):
    fsmText = State()
    fsmTime = State()

@callbacks.callback_query(F.data == "postsAdd")
async def cbPostsAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(postsAdd.fsmText)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
                                     reply_markup=None)

@callbacks.message(postsAdd.fsmText)
async def admfsmPostsText(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(postsAdd.fsmTime)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–î–î.–ú–ú –ß–ß:–ú–ú):")

@callbacks.message(postsAdd.fsmTime)
async def admfsmPostsTime(message: Message, state: FSMContext):
    try:
        timeStr = message.text.strip()
        timeIntNow = datetime.now()
        postTime = datetime.strptime(timeStr, "%d.%m %H:%M").replace(year=timeIntNow.year)   
        
        if postTime <= timeIntNow:
            await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
            
        data = await state.get_data()
        postText = data.get('text')
        await dbp.add(postText, postTime, CHANNEL)
        await state.clear()
        
        await message.answer(f"–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {postTime.strftime('%d.%m %H:%M')}.")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω—É–∂–Ω–æ –î–î.–ú–ú –ß–ß:–ú–ú). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await state.clear()


# callback "postsList"
@callbacks.callback_query(F.data.startswith("post_"))
async def cbPostsListPostPage(callback: CallbackQuery):
    postId = int(callback.data.replace("post_", ""))
    
    async with aiosqlite.connect('databases/posts.db') as db:
        async with db.execute("SELECT text, time, channel_id FROM posts WHERE post_id = ?", (postId,)) as cursor:
            post = await cursor.fetchone()

        text, time, channel_id = post

        await callback.message.edit_text(f"<blockquote>{text}</blockquote>\n\n–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã–ª–æ–∂–∏—Ç—å {time}\n–í –∫–∞–Ω–∞–ª {channel_id}",
                                         reply_markup=kb.postsListActions_(postId))


class admfsmPostsNewTime(StatesGroup):
    newTime = State()

@callbacks.callback_query(F.data.startswith("postsListActionsNewTime_"))
async def cbPostsListActionsNewTime(callback: CallbackQuery, state: FSMContext):
    postId = int(callback.data.replace("postsListActionsNewTime_", ""))
    await state.update_data(postId=postId)
    await state.set_state(admfsmPostsNewTime.newTime)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–î–î.–ú–ú –ß–ß:–ú–ú):")

@callbacks.message(admfsmPostsNewTime.newTime)
async def admfsmPostsListActionsNewTime(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        postId = data['postId']

        timeStr = message.text.strip()
        timeIntNow = datetime.now()
        postTime = datetime.strptime(timeStr, "%d.%m %H:%M").replace(year=timeIntNow.year)   

        if postTime <= timeIntNow:
            await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
            
        async with aiosqlite.connect('databases/posts.db') as db:
            await db.execute("UPDATE posts SET time = ? WHERE post_id = ?", (postTime, postId))
            await db.commit()
        
        await state.clear()

        await message.answer(f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {postTime.strftime('%d.%m %H:%M')}")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω—É–∂–Ω–æ –î–î.–ú–ú –ß–ß:–ú–ú). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞: {e}")
        await state.clear()


class admfsmPostsNewText(StatesGroup):
    newText = State()

@callbacks.callback_query(F.data.startswith("postsListActionsNewText_"))
async def cbPostsListActionsNewText(callback: CallbackQuery, state: FSMContext):
    postId = int(callback.data.replace("postsListActionsNewText_", ""))
    await state.update_data(postId=postId)
    await state.set_state(admfsmPostsNewText.newText)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")

@callbacks.message(admfsmPostsNewText.newText)
async def admfsmPostsListActionsNewText(message: Message, state: FSMContext):
        data = await state.get_data()
        postId = data['postId']
        postNewText = message.text

        async with aiosqlite.connect('databases/posts.db') as db:
            await db.execute("UPDATE posts SET text = ? WHERE post_id = ?",  (postNewText, postId))
            await db.commit()

        await state.clear()
        
        await message.answer(f"–ü–æ—Å—Ç—É ‚Ññ{postId} –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n<blockquote>{postNewText}</blockquote>")    


@callbacks.callback_query(F.data.startswith("postsActionsDelete_"))
async def cbPostsListActionsDelete(callback: CallbackQuery):
    postId = int(callback.data.replace("postsActionsDelete_", ""))
    await dbp.delete(postId)

    await callback.answer(f"–ü–æ—Å—Ç ‚Ññ{postId} —É–¥–∞–ª—ë–Ω.")
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.postsList())
    

@callbacks.callback_query(F.data == "postsListActionsBack")
async def cbPostsListActionsBack(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏.",
                                     reply_markup=await kb.postsList())